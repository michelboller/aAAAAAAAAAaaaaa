(defclass Registro ()
  ((nome :accessor nome :initarg :nome)
   (valor :accessor valor :initarg :valor)))

(defclass RegistroManager ()
  ((registros :accessor registros :initform nil)))

(defmethod adicionar-registro ((manager RegistroManager) nome valor)
  (push (make-instance 'Registro :nome nome :valor valor) (registros manager)))

(defmethod listar-registros ((manager RegistroManager))
  (format t "Registros cadastrados:~%")
  (dolist (registro (registros manager))
    (format t "Nome: ~a, Valor: ~a~%" (nome registro) (valor registro)))

(defmethod buscar-registro ((manager RegistroManager) nome)
  (find nome (registros manager) :key #'nome :test #'string=))

(defmethod alterar-registro ((manager RegistroManager) nome novo-valor)
  (let ((registro (buscar-registro manager nome)))
    (if registro
        (setf (valor registro) novo-valor)
        (format t "Registro não encontrado.~%"))))

(defmethod confirmar-exclusao ((manager RegistroManager) nome)
  (if (find nome (registros manager) :key #'nome :test #'string=)
      (format t "Confirma a exclusão do registro ~a? (S/N): " nome)
      (format t "Registro não encontrado.~%")))

(defmethod excluir-registro ((manager RegistroManager) nome)
  (let ((registro (buscar-registro manager nome)))
    (if registro
        (progn
          (setf (registros manager) (remove registro (registros manager)))
          (format t "Registro ~a excluído.~%" nome))
        (format t "Registro não encontrado.~%"))))

(defun menu ()
  (let ((manager (make-instance 'RegistroManager)))
    (loop
      (format t "Menu Principal:~%")
      (format t "1 - Cadastro~%")
      (format t "2 - Alteração~%")
      (format t "3 - Exclusão~%")
      (format t "4 - Consulta~%")
      (format t "5 - Relatório~%")
      (format t "6 - Sair~%")
      (format t "Escolha uma opção: ")
      (let ((opcao (read)))
        (case opcao
          (1
           (format t "Nome do registro: ")
           (let ((nome (read-line)))
             (format t "Valor do registro: ")
             (let ((valor (read)))
               (adicionar-registro manager nome valor)
               (format t "Registro ~a cadastrado.~%" nome))))
          (2
           (format t "Nome do registro para alteração: ")
           (let ((nome (read-line)))
             (let ((registro (buscar-registro manager nome)))
               (if registro
                   (progn
                     (format t "Registro ~a encontrado. Valor atual: ~a~%" nome (valor registro))
                     (format t "Novo valor: ")
                     (let ((novo-valor (read)))
                       (alterar-registro manager nome novo-valor)
                       (format t "Registro ~a alterado.~%" nome)))
                   (format t "Registro não encontrado.~%")))))
          (3
           (format t "Nome do registro para exclusão: ")
           (let ((nome (read-line)))
             (format t "Aguarde...~%")
             (let ((confirma (confirmar-exclusao manager nome)))
               (let ((resposta (read-line)))
                 (when (string= resposta "S")
                   (excluir-registro manager nome))))))
          (4
           (format t "Nome do registro para consulta: ")
           (let ((nome (read-line)))
             (let ((registro (buscar-registro manager nome)))
               (if registro
                   (format t "Registro ~a encontrado. Valor: ~a~%" nome (valor registro))
                   (format t "Registro não encontrado.~%"))))
          (5
           (listar-registros manager))
          (6
           (return)))))))

(menu)
