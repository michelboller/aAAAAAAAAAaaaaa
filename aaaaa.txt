(defclass Contact ()
  ((name :initarg :name :accessor contact-name)
   (phone :initarg :phone :accessor contact-phone)))

(defvar *contacts* '())

(defmethod create-contact ((name string) (phone string))
  (push (make-instance 'contact :name name :phone phone) *contacts*))

(defmethod read-contacts ()
  (mapcar #'list (mapcar #'contact-name *contacts*) (mapcar #'contact-phone *contacts*)))

(defmethod update-contact ((old-name string) (new-name string) (new-phone string))
  (dolist (contact *contacts*)
    (when (string= (contact-name contact) old-name)
      (setf (contact-name contact) new-name)
      (setf (contact-phone contact) new-phone))))

(defmethod delete-contact ((name string))
  (setf *contacts* (remove-if (lambda (contact) (string= (contact-name contact) name)) *contacts*)))

;; Exemplos de uso
(create-contact "João" "123-456-7890")
(create-contact "Maria" "987-654-3210")

(format t "Contatos: ~a~%" (read-contacts))

(update-contact "João" "John" "555-555-5555")

(format t "Contatos após a atualização: ~a~%" (read-contacts))

(delete-contact "Maria")

(format t "Contatos após a exclusão: ~a~%" (read-contacts))
